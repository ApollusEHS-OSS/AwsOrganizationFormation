
service: create-account

custom:
  resourcePrefix: my-account-creation

provider:
  name: aws
  region: us-east-1
  runtime: nodejs10.x
  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
    - Effect: 'Allow'
      Action:
        - ses:sendTemplatedEmail
        - organizations:describeAccount
      Resource: '*'


functions:
  getAccountData:
    handler: handler.getAccountData
    name: ${self:custom.resourcePrefix}-getAccountData
  sendEmail:
    handler: handler.sendEmail
    name: ${self:custom.resourcePrefix}-sendEmail
    environment:
      fromEmailAddress: ${file(./variables.yml):notificationEmailFrom}

stepFunctions:
  stateMachines:
    accountCreation:
      name: OrgFormationAccountCreation
      definition:
        Comment: Step function that will automate the process that needs to follow account creation
        StartAt: GetAccountData
        States:
          GetAccountData:
            Type: Task
            Resource: !GetAtt getAccountData.Arn
            Next: PerformTasks
            ResultPath: '$.accountData'
            # Catch:
            # - ErrorEquals:
            #   - States.ALL
            #   IntervalSeconds: 3
            #   BackoffRate: 1.5
            #   MaxAttempts: 3
          PerformTasks:
            Type: Parallel
            End: true
            Branches:
            - StartAt: NotifyEmail
              States:
                NotifyEmail:
                  Type: Task
                  End: true
                  Resource: !GetAtt sendEmail.Arn
                  Parameters:
                    toAddress: ${file(./variables.yml):notificationEmailTo}
                    contentTemplateData.$: $.accountData
                    contentTemplateName: ${self:custom.resourcePrefix}-mail-template
plugins:
  - serverless-step-functions

resources:
  Resources:

    OrganizationEventRule:
      Type: AWS::Events::Rule
      Properties:
        Name: ${self:custom.resourcePrefix}-rule
        Description: Rule used to forward organization events
        State: ENABLED
        EventPattern:
          source:
            - oc.org-formation
          detail:
            eventName:
              - AccountCreated
        Targets:
          - Arn: !Ref OrgFormationAccountCreation
            RoleArn: !GetAtt OrganizationEventRuleTargetRole.Arn
            Id: invokeStepFunction
            InputPath: $.detail

    OrganizationEventRuleTargetRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.resourcePrefix}-rule-role
        Policies:
        - PolicyName: StepStartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref OrgFormationAccountCreation
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole

    NotifyEmailTemplate:
      Type: AWS::SES::Template
      Properties:
        Template:
          TemplateName: ${self:custom.resourcePrefix}-mail-template
          SubjectPart: 'New AWS Account: {{Name}}'
          TextPart: |
            Hello,
            We just added a new account to our AWS Organization =).

            Details on the account:
              - Root Email: {{Email}}
              - Account Id: {{Id}}
              - Account Name: {{Name}}

            Would you please:
              - Add this account to confluence?
              - Update the VAT information for this account?
              - Update the alternate contacts for this account?

            Thanks,
            The platform team.


