AWSTemplateFormatVersion: '2010-09-09-OC'
Description: example template that demonstrates creating of sns topics in multiple account that will trigger a lambda in a central account.

Organization: !Include ./organization.yml

Resources:

  Topic:
    Type: AWS::SNS::Topic
    OrganizationBindings:
      Accounts: '*'
      Regions: eu-central-1
    Properties:
      DisplayName: !Sub 'topic that will invoke a lambda cross account on account ${SharedServicesAccount.AccountName}'
      TopicName: !Sub 'cross-account-invoke'

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn:
      - Topic
    OrganizationBindings:
      Accounts: '*'
      Regions: eu-central-1
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: !Sub '${SharedServicesAccount}-publish'
          Effect: Allow
          Principal:
            AWS: !Ref SharedServicesAccount
          Action:
          - sns:Publish
          Resource: !Ref Topic
      Topics:
        -  !Ref Topic

  MySubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
      - Function
      - TopicPolicy
      - Topic
    OrganizationBindings:
      Accounts: '*'
      Regions: eu-central-1
    Properties:
      Endpoint: !GetAtt Function.Arn
      Protocol: lambda
      TopicArn: !Ref Topic

  FunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    OrganizationBindings:
      Accounts: !Ref SharedServicesAccount
      Regions: eu-central-1
    Foreach:
      Accounts: '*'
      ExcludeAccounts: !Ref SharedServicesAccount
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Function
      Principal: sns.amazonaws.com
      SourceAccount: !Ref CurrentAccount
      SourceArn: !Sub 'arn:aws:sns:eu-central-1:${CurrentAccount.AccountId}:cross-account-invoke'

  Function:
    Type: 'AWS::Lambda::Function'
    OrganizationBindings:
      Accounts: !Ref SharedServicesAccount
      Regions: eu-central-1
    Properties:
      Description: Sample function
      Handler: index.lambda_handler
      Runtime: python2.7
      Role: !GetAtt AWSLambdaBasicExecutionRole.Arn
      FunctionName: LOG
      Code:
        ZipFile: |
          import logging
          import boto3
          import json
          logger = logging.getLogger('boto3')
          logger.setLevel(logging.INFO)
          def lambda_handler(event, context):
              logger.info(json.dumps(event))


  AWSLambdaBasicExecutionRole:
    Type: 'AWS::IAM::Role'
    OrganizationBindings:
      Accounts: !Ref SharedServicesAccount
      Regions: eu-central-1
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: lambdaInvokeFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: '*'
                Action: 'lambda:InvokeFunction'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com